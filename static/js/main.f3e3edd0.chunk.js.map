{"version":3,"sources":["Pages/Home.js","Components/Navigation/RightMenu.js","Components/Navigation/Navbar.js","App.js","serviceWorker.js","index.js","images/webDevImage.png"],"names":["Home","className","href","target","type","src","WebDevImage","xmlns","viewBox","fill","fill-opacity","d","RightMenu","Menu","SubMenu","mode","this","props","Item","key","Component","Navbar","showDrawer","setState","visible","onClose","state","current","to","exact","onClick","title","placement","closable","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"yQA8CeA,EAzCF,WACX,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,qBACb,6BACE,wBAAIA,UAAU,0BAAd,qCAIF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,YACb,uBAAGC,KAAK,+BAA+BC,OAAO,UAC5C,kBAAC,IAAD,CAAMC,KAAK,aAGf,yBAAKH,UAAU,YACb,uBACEC,KAAK,2DACLC,OAAO,UAEP,kBAAC,IAAD,CAAMC,KAAK,iBAKnB,yBAAKH,UAAU,aACb,yBAAKI,IAAKC,QAGd,yBAAKC,MAAM,6BAA6BC,QAAQ,gBAC9C,0BACEC,KAAK,UACLC,eAAa,IACbC,EAAE,iQ,yDClBGC,GAlBCC,IAAKC,Q,iLAIjB,OACE,6BACE,kBAAC,IAAD,CAAMC,KAAMC,KAAKC,MAAMF,MACrB,kBAAC,IAAKG,KAAN,CAAWC,IAAI,SACb,uBAAGjB,KAAK,wCAAwCC,OAAO,KAAvD,mB,GANYiB,c,kBCoDTC,E,YAlDb,WAAYJ,GAAQ,IAAD,8BACjB,4CAAMA,KAORK,WAAa,WACX,EAAKC,SAAS,CACZC,SAAS,KAVM,EAcnBC,QAAU,WACR,EAAKF,SAAS,CACZC,SAAS,KAdX,EAAKE,MAAQ,CACXC,QAAS,OACTH,SAAS,GAJM,E,sEAqBjB,OACE,yBAAKvB,UAAU,WACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAS2B,GAAG,IAAIC,OAAK,GAArB,sBAIF,yBAAK5B,UAAU,WACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAWc,KAAK,gBAElB,kBAAC,IAAD,CAAQd,UAAU,WAAWG,KAAK,UAAU0B,QAASd,KAAKM,YACxD,0BAAMrB,UAAU,aAElB,kBAAC,IAAD,CACE8B,MAAM,QACNC,UAAU,QACVC,UAAU,EACVR,QAAST,KAAKS,QACdD,QAASR,KAAKU,MAAMF,SAEpB,kBAAC,EAAD,a,GA3CSJ,a,OCaNc,MATf,WACE,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,OCFckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.f3e3edd0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport {Icon} from 'antd';\r\nimport WebDevImage from \"../images/webDevImage.png\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"body-cont\">\r\n      <div className=\"mainPageCont\">\r\n        <div className=\"headerAndLinkCont\">\r\n          <div>\r\n            <h1 className=\"typography-h1-headline\">\r\n              Hi, Im Alex and I make websites.\r\n            </h1>\r\n          </div>\r\n          <div className=\"links-cont\">\r\n            <div className=\"linkCont\">\r\n              <a href=\"https://github.com/algonzale\" target=\"_blank\">\r\n                <Icon type=\"github\" />\r\n              </a>\r\n            </div>\r\n            <div className=\"linkCont\">\r\n              <a\r\n                href=\"https://www.linkedin.com/in/alejandro-jimenez-628698169/\"\r\n                target=\"_blank\"\r\n              >\r\n                <Icon type=\"linkedin\" />\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"imageCont\">\r\n          <img src={WebDevImage} />\r\n        </div>\r\n      </div>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\r\n        <path\r\n          fill=\"#F09819\"\r\n          fill-opacity=\"1\"\r\n          d=\"M0,128L60,160C120,192,240,256,360,250.7C480,245,600,171,720,165.3C840,160,960,224,1080,256C1200,288,1320,288,1380,288L1440,288L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z\"\r\n        ></path>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;","import React, { Component } from \"react\";\nimport { Menu, Icon } from \"antd\";\nimport { NavLink } from \"react-router-dom\";\nconst SubMenu = Menu.SubMenu;\n\nclass RightMenu extends Component {\n  render() {\n    return (\n      <div>\n        <Menu mode={this.props.mode}>\n          <Menu.Item key=\"login\">\n            <a href=\"https://algonzale.github.io/projects/\" target=\"#\">\n              Projects\n            </a>\n          </Menu.Item>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nexport default RightMenu;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport RightMenu from \"./RightMenu\";\nimport { Drawer, Button } from \"antd\";\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: \"mail\",\n      visible: false\n    };\n  }\n\n  showDrawer = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false\n    });\n  };\n\n  render() {\n    return (\n      <nav className=\"menuBar\">\n        <div className=\"logo\">\n          <NavLink to=\"/\" exact>\n            Alejandro Jimenez\n          </NavLink>\n        </div>\n        <div className=\"menuCon\">\n          <div className=\"rightMenu\">\n            <RightMenu mode='horizontal'/>\n          </div>\n          <Button className=\"barsMenu\" type=\"primary\" onClick={this.showDrawer}>\n            <span className=\"barsBtn\"></span>\n          </Button>\n          <Drawer\n            title=\"Links\"\n            placement=\"right\"\n            closable={false}\n            onClose={this.onClose}\n            visible={this.state.visible}\n          >\n            <RightMenu/>\n          </Drawer>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport { HashRouter, Route, Link, Switch } from \"react-router-dom\";\n\nimport Home from './Pages/Home';\nimport Projects from './Pages/Projects';\n\nimport Navbar from \"./Components/Navigation/Navbar\";\nimport { Icon } from \"antd\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"antd/dist/antd.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/webDevImage.e08e6d9b.png\";"],"sourceRoot":""}